<!DOCTYPE html>
<html>
<head>
<style type="text/css">
div.new{position:fixed;top:80px;left:730px;text-align:left;float:right;}
div.button{position:fixed;top:530px;left:280px;}
</style>
<title>Graph Colouring</title>		
</head>
<body>
<h1 align="center">Graph Colouring</h1>
<canvas id="graph" width="700" height="440" style="border:2px solid #000000;"></canvas>
<div class="new"><h3>Instructions:</h3>
<ul type="circle">
<li>Double-click on the canvas to create a node</li><br>
<li>Single-click on the nodes to draw a line</li><br>
<li>Click on the colour button for solution</li><br>
<li>Click on the clear button for resetting the canvas</li><br>
</ul></div>
<div class="button">
<input id="submit" type=button value="COLOUR" >
<input id="clear" type=button value="CLEAR" >
</div>
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script>
canvas=document.getElementById('graph'); 	
context = canvas.getContext('2d');
init();

function init(){
canvas.addEventListener('dblclick',drawcircle,false)
canvas.addEventListener('click',drawline, false);
clear.addEventListener('click', clearCanvas, false);
submit.addEventListener('click', send, false);
}	
var vertex_list=[];
var adj_list=[];
var start_edge=0;
var selected_vertex=-1;
var v=0;
var color= ['#ff66ff', '#ff7f00', '#ffff00', '#00ff00', '#008800','#000000','FF0000','#0000FF','CCFF00','3300CC']
	
function Point(x,y){
    this.x = x;
    this.y = y;
}
function mousePos(e){
    var point = new Point(0,0);
    if (e.pageX != undefined && e.pageY != undefined) {
	point.x = e.pageX;
	point.y = e.pageY;
}
    else{
	point.x = e.clientX + document.body.scrollLeft +
		document.documentElement.scrollLeft;
	point.y = e.clientY + document.body.scrollTop +
		document.documentElement.scrollTop;
	}
		
    point.x -= canvas.offsetLeft;
    point.y -= canvas.offsetTop;
    return point;       	
}

function clearCanvas(){
    document.location.href="/"
}
	
function drawVertex(point,color){		
    context.beginPath();
    context.arc(point.x,point.y,15, 0, 2*Math.PI, false);
    context.stroke();
    context.closePath();
    context.fillStyle=color 
    context.fill();
}	

function drawcircle(e){		
    point=mousePos(e);
    if(checkVertexInRange(point,40)==-1){
	drawVertex(point,"black");
	context.font = "10pt Courier New";
	context.fillText(v,point.x+10,point.y-20);			
	v++;
	vertex_list.push(point);
	}	
    else{ 
        alert("node overlapped");
	}
}

function drawline(e){		
    var point = mousePos(e);
    var vertex_no=checkVertexInRange(point,40);
    if(vertex_no>=0){
	if(start_edge==0){
	  start_edge=1;
	  selected_vertex=vertex_no;
	  context.beginPath();
      	  context.moveTo(vertex_list[vertex_no].x, vertex_list[vertex_no].y);				
	}
	else{
	  start_edge=0;
          if(adj_list[selected_vertex]==undefined)
		adj_list[selected_vertex]= new Array();
	  if(adj_list[vertex_no]==undefined)
		adj_list[vertex_no]= new Array();
	  if(selected_vertex!=vertex_no){
		adj_list[selected_vertex].push(vertex_no);
		adj_list[vertex_no].push(selected_vertex);
	  }
	  context.lineTo(vertex_list[vertex_no].x,vertex_list[vertex_no].y)
	  context.stroke();
	  context.closePath(); 
		}
	}
    else
	 start_edge=0;
    }

function checkVertexInRange(point,range){		
    for(i=0;i<vertex_list.length;i++) {
	rangex = point.x>=vertex_list[i].x-range && point.x<=vertex_list[i].x+range
	rangey = point.y>=vertex_list[i].y-range && point.y<=vertex_list[i].y+range
	if(rangex && rangey)
		return i;
	}
	return -1;
}
		 			
function send(){
    var i;		
    for(i=0;i<adj_list.length;i++)
      if(adj_list[i]==undefined){
        adj_list[i]= new Array();
        }
    $.post("/",{data:JSON.stringify(adj_list)},function(data){
      data =data.replace(/\[/g,"").replace(/\]/g,"").split(",");
      var i;
      for(i=0;i<data.length;i++){
	drawVertex(vertex_list[i],color[Number(data[i])]);
		}
	});
		
}
	
</script>
</body>
</html>

